{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to TestGlossary This is the official documentation for the TestGlossary project. If you have ideas, feel free to get in touch or open an Issue to the project repository . Commands make run - start uvicorn server at port 8880 make install - install project dependencies from requirements.txt file make test - execute all tests make lint - use linter make lint - use linter make help - lists all Makefile commands Auxiliary commands make go-prod - start uvicorn server with production environment configuraiton make gh-deploy - uses the built-in tool of MkDocs (docs here ) to deploy documenation to the specific branch that is responsible to handle the GitHub page: thiagojacinto.github.io/test-glossary-project/ make docker-build - build a new Docker image and tag it with timestamp. Project layout Makefile # Makefile with simplifications for project maintenance mkdocs.yml # MkDocs configuration file. log_conf.yaml # Logging configuraiton file. .env # Important environment variables like DATABASE_CONNECTION_STRING docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other documentation related files. tests/ ... # Test related files should be here testglossary/ ... # Main application files must be placed under this directory, following futher structure. .env files The development was done considering two environments: production and staging. So, at root directory must exist at least two files named: - .env - .staging.env The content of these files must contain the following variables and its values: - DATABASE_CONNECTION_STRING # desired database connection string. # An example could be a DB-as-a-Service implementation like: # Heroku Postgres DBaaS, ElephantSQL Why documentation? Documentation matters. To help with this project goal, TestGlossary uses MkDocs. For full documentation how-to visit mkdocs.org . We highly recommend you to.","title":"Welcome to TestGlossary"},{"location":"#welcome-to-testglossary","text":"This is the official documentation for the TestGlossary project. If you have ideas, feel free to get in touch or open an Issue to the project repository .","title":"Welcome to TestGlossary"},{"location":"#commands","text":"make run - start uvicorn server at port 8880 make install - install project dependencies from requirements.txt file make test - execute all tests make lint - use linter make lint - use linter make help - lists all Makefile commands","title":"Commands"},{"location":"#auxiliary-commands","text":"make go-prod - start uvicorn server with production environment configuraiton make gh-deploy - uses the built-in tool of MkDocs (docs here ) to deploy documenation to the specific branch that is responsible to handle the GitHub page: thiagojacinto.github.io/test-glossary-project/ make docker-build - build a new Docker image and tag it with timestamp.","title":"Auxiliary commands"},{"location":"#project-layout","text":"Makefile # Makefile with simplifications for project maintenance mkdocs.yml # MkDocs configuration file. log_conf.yaml # Logging configuraiton file. .env # Important environment variables like DATABASE_CONNECTION_STRING docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other documentation related files. tests/ ... # Test related files should be here testglossary/ ... # Main application files must be placed under this directory, following futher structure.","title":"Project layout"},{"location":"#env-files","text":"The development was done considering two environments: production and staging. So, at root directory must exist at least two files named: - .env - .staging.env The content of these files must contain the following variables and its values: - DATABASE_CONNECTION_STRING # desired database connection string. # An example could be a DB-as-a-Service implementation like: # Heroku Postgres DBaaS, ElephantSQL","title":".env files"},{"location":"#why-documentation","text":"Documentation matters. To help with this project goal, TestGlossary uses MkDocs. For full documentation how-to visit mkdocs.org . We highly recommend you to.","title":"Why documentation?"},{"location":"service/","text":"Service TestGlossary offers an API Service to be used, and documentation for that is also available in well stablished formats - once the server is up and running: OpenAPI v3 : accessing /api/openapi.json swagger : accessing /api/docs redocs : accessing /api/redocs While you may find some discussion here about the funcionalities, feel free to visit the the links above.","title":"Service"},{"location":"service/#service","text":"TestGlossary offers an API Service to be used, and documentation for that is also available in well stablished formats - once the server is up and running: OpenAPI v3 : accessing /api/openapi.json swagger : accessing /api/docs redocs : accessing /api/redocs While you may find some discussion here about the funcionalities, feel free to visit the the links above.","title":"Service"},{"location":"service/v1/","text":"API: Version 1 This page lists the features implemented in this version of the Test-Glossary service API. api/v1/healthcheck Endpoint that returns an OK status response just to give an overall status feedback. Allowed Methods GET api/v1/healthcheck api/v1/terms Service that concentrate interactions between user and test Terms database. - returns a paginated list of all registered glossary test Terms; - allow filtering of specific test Terms, returning a paginated list as well, if any match. Allowed Methods GET api/v1/terms GET api/v1/terms?page=2&terms_per_page=5 GET api/v1/terms/search/{specific-term} GET api/v1/terms/search/{specific-term}?page=1&terms_per_page=5","title":"API: Version 1"},{"location":"service/v1/#api-version-1","text":"This page lists the features implemented in this version of the Test-Glossary service API.","title":"API: Version 1"},{"location":"service/v1/#apiv1healthcheck","text":"Endpoint that returns an OK status response just to give an overall status feedback.","title":"api/v1/healthcheck"},{"location":"service/v1/#allowed-methods","text":"GET api/v1/healthcheck","title":"Allowed Methods"},{"location":"service/v1/#apiv1terms","text":"Service that concentrate interactions between user and test Terms database. - returns a paginated list of all registered glossary test Terms; - allow filtering of specific test Terms, returning a paginated list as well, if any match.","title":"api/v1/terms"},{"location":"service/v1/#allowed-methods_1","text":"GET api/v1/terms GET api/v1/terms?page=2&terms_per_page=5 GET api/v1/terms/search/{specific-term} GET api/v1/terms/search/{specific-term}?page=1&terms_per_page=5","title":"Allowed Methods"}]}